From 18e4c7a7942b8d8cd375a8f039e60bfb744aecd1 Mon Sep 17 00:00:00 2001
From: rbmj <rbmj@verizon.net>
Date: Sat, 4 Jan 2014 16:16:01 -0500
Subject: [PATCH 2/3] Fix vxworks posix threading

---
 libgcc/config.host              |  8 ++++++++
 libgcc/config/t-vxworks-pthread | 14 ++++++++++++++
 libgcc/config/vxlib-pthread.c   | 38 ++++++++++++++++++++++++++++++++++++++
 libgcc/gthr-posix.h             | 27 ++++++++++++++++++++++++++-
 4 files changed, 86 insertions(+), 1 deletion(-)
 create mode 100644 libgcc/config/t-vxworks-pthread
 create mode 100644 libgcc/config/vxlib-pthread.c

diff --git a/libgcc/config.host b/libgcc/config.host
index 259c9a7..21471db 100644
--- a/libgcc/config.host
+++ b/libgcc/config.host
@@ -261,6 +261,14 @@ case ${host} in
   ;;
 *-*-vxworks*)
   tmake_file=t-vxworks
+  case ${target_thread_file} in
+    vxworks)
+      tmake_file=t-vxworks
+      ;;
+    posix)
+      tmake_file=t-vxworks-pthread
+	  ;;
+  esac
   ;;
 *-*-elf)
   extra_parts="crtbegin.o crtend.o"
diff --git a/libgcc/config/t-vxworks-pthread b/libgcc/config/t-vxworks-pthread
new file mode 100644
index 0000000..9d0aff5
--- /dev/null
+++ b/libgcc/config/t-vxworks-pthread
@@ -0,0 +1,14 @@
+# Don't build libgcc.a with debug info
+LIBGCC2_DEBUG_CFLAGS =
+
+# Fill in the gaps of vxworks' pthread implementation
+LIB2ADD = $(srcdir)/config/vxlib-pthread.c
+
+# This ensures that the correct target headers are used; some
+# VxWorks system headers have names that collide with GCC's
+# internal (host) headers, e.g. regs.h.
+LIBGCC2_INCLUDES = -nostdinc -I \
+  `case "/$$(MULTIDIR)" in \
+     */mrtp*) echo $(WIND_USR)/h ;; \
+     *) echo $(WIND_BASE)/target/h ;; \
+   esac`
diff --git a/libgcc/config/vxlib-pthread.c b/libgcc/config/vxlib-pthread.c
new file mode 100644
index 0000000..b9976fe
--- /dev/null
+++ b/libgcc/config/vxlib-pthread.c
@@ -0,0 +1,38 @@
+/* Copyright (C) 2014 Free Software Foundation, Inc.
+   Contributed by Robert Mason <rbmj@verizon.net>
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify it under
+the terms of the GNU General Public License as published by the Free
+Software Foundation; either version 3, or (at your option) any later
+version.
+
+GCC is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+Under Section 7 of GPL version 3, you are granted additional
+permissions described in the GCC Runtime Library Exception, version
+3.1, as published by the Free Software Foundation.
+
+You should have received a copy of the GNU General Public License and
+a copy of the GCC Runtime Library Exception along with this program;
+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+<http://www.gnu.org/licenses/>.  */
+
+/* VxWorks gthread support routines when in posix threads mode */
+
+#include <gthr.h>
+
+#define ATTRIBUTE_UNUSED __attribute__((unused))
+
+int
+__gthrw_pthread_mutexattr_settype (pthread_mutexattr_t *a ATTRIBUTE_UNUSED, int t ATTRIBUTE_UNUSED)
+{
+  /* TODO:  Perhaps we can override the gthread mutex class to simulate
+     non-recursive mutexes?  For now, since recursive mutexes cover
+     the most general case, we'll just ignore the request. */
+  return 0;
+}
diff --git a/libgcc/gthr-posix.h b/libgcc/gthr-posix.h
index f0d8cd7..fb56fa2 100644
--- a/libgcc/gthr-posix.h
+++ b/libgcc/gthr-posix.h
@@ -33,6 +33,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 #define __GTHREADS_CXX0X 1
 
 #include <pthread.h>
+/* For timespec, in case pthread.h doesn't include this */
+#include <time.h>
+/* For sched_yield, in case pthread.h doesn't include this */
+#include <sched.h>
 
 #if ((defined(_LIBOBJC) || defined(_LIBOBJC_WEAK)) \
      || !defined(_GTHREAD_USE_MUTEX_TIMEDLOCK))
@@ -130,10 +134,31 @@ __gthrw(pthread_cond_destroy)
 
 __gthrw(pthread_key_create)
 __gthrw(pthread_key_delete)
+
 __gthrw(pthread_mutexattr_init)
-__gthrw(pthread_mutexattr_settype)
 __gthrw(pthread_mutexattr_destroy)
 
+/* VxWorks does not define pthread_mutexattr_settype itself, and we need
+   the constants and a prototype to be defined somewhere so the rest of 
+   this file will compile (they will be ignored) */
+#ifdef __VXWORKS__
+
+int
+__gthrw_pthread_mutexattr_settype (pthread_mutexattr_t*, int);
+
+#define PTHREAD_MUTEX_NORMAL 0
+#define PTHREAD_MUTEX_ERRORCHECK 0
+#define PTHREAD_MUTEX_RECURSIVE 0
+#define PTHREAD_MUTEX_DEFAULT 0
+
+#else
+
+__gthrw(pthread_mutexattr_settype)
+
+#endif 
+
+
+
 
 #if defined(_LIBOBJC) || defined(_LIBOBJC_WEAK)
 /* Objective-C.  */
-- 
1.8.4.rc3

